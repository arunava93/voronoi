import os

from .voro_helper import Timer

def wrt_main(voro,file_name):
    
    lines=[]
    lines.append('*Heading')
    lines.append('** Model name: '+voro.fname)
    lines.append('** Job name: '+voro.fname+ ' Model name: '+voro.fname)
    lines.append('** Generated by voro++,gmsh,tess')
    lines.append('*Preprint, echo=NO, model=NO, history=NO, contact=NO')
    lines.append('**')
    lines.append('*Part, name='+voro.fname)
    lines.append('*End Part')
    lines.append('**')
    lines.append('*Assembly, name=Assembly')
    lines.append('**')
    lines.append('*Instance, name='+voro.fname+'-1, part='+voro.fname)
    lines.append('*Include, Input='+voro.fname+'_nodes.inp')
    lines.append('*Include, Input='+voro.fname+'_elements.inp')
    lines.append('*End Instance')
    lines.append('**')
    lines.append('*Include, Input='+voro.fname+'_pbcs.inp')
    lines.append('**')
    lines.append('*End Assembly')
    lines.append('**')
    lines.append('*Include, Input='+voro.fname+'_materials.inp')
    lines.append('*Include, Input='+voro.fname+'_steps.inp')
    
    wrt_to_file(file_name+"_main.inp",lines)

def wrt_nodes(voro,file_name,nodes,fixed_node):
    
    lines=['*Node']
    
    n=len(nodes[0])
    
    for i in range(n):
        lines.append(str(nodes[0][i])+', '+str(nodes[1][3*i])+', '+str(nodes[1][3*i+1])+', '+str(nodes[1][3*i+2]))

    lines.append(str(n+1)+', 1.0, 0.0, 0.0')
    lines.append(str(n+2)+', 0.0, 1.0, 0.0')
    lines.append(str(n+3)+', 0.0, 0.0, 1.0')
    
    lines.append('**')
    lines.append('*Nset, nset=fixedpoint, instance='+voro.fname+'-1')
    lines.append(' '+str(fixed_node))
    
    for i in range(3):
        lines.append('*Nset, nset=I'+str(i+1)+', instance='+voro.fname+'-1')
        lines.append(' '+str(n+1+i))

    wrt_to_file(file_name+"_nodes.inp",lines)

def wrt_elements(voro,file_name,elems,grains,settings,cus_type=''):
    
    [typ,order]=settings

    lines=[]
    for e in range(0,voro.n):
        elem=elems[e]
        grain=grains[e]
    
        n=len(elem[1][0])
        elem_type=elem[0][0]

        if voro.dim=='3d':

            if typ=='tet':
                nodes=4 if order==1 else 10
                typ_txt='C3D4' if order==1 else 'C3D10H'
            elif typ=='hex':
                nodes=8 if order==1 else 20
                typ_txt='C3D8' if order==1 else 'C3D20R'
        else:

            if typ=='tri':
                nodes=3 if order ==1 else 6
                typ_txt='CPE6MH'

        if cus_type != '':
            typ_txt=cus_type

        lines.append('*Element, type='+typ_txt+', elset='+grain)

        for i in range(n):
            line=str(elem[1][0][i])

            for j in range(nodes):
                k=j if voro.dim=='3d' else nodes-1-j
                if j==8:
                    k=9
                elif j==9:
                    k=8

                line=line+', '+str(elem[2][0][nodes*i+k])
            lines.append(line)
            
    lines.append('**')

    lines=lines+wrt_sections(voro)

    wrt_to_file(file_name+"_elements.inp",lines)

def wrt_sections(voro):

    lines=['**']
    for gid in voro.gids:
        lines.append('*Solid Section, elset=grain-'+str(gid+1)+' ,material=grain-'+str(gid+1))
        lines.append('**')

    lines.append('**')
    
    return lines
   
def wrt_pbcs(voro,file_name,pairs,dof=range(1,4)):

    lines=[]
        
    for pair in pairs:        
        for i in dof:
            lines.append('*Equation')
            lines.append('    5')
            lines.append(voro.fname+'-1.'+str(pair[0])+','+str(i)+',-1.')
            lines.append(voro.fname+'-1.'+str(pair[1])+','+str(i)+', 1.')
            lines.append(voro.fname+'-1.'+'I1,'+str(i)+','+str(pair[2][0]))
            lines.append(voro.fname+'-1.'+'I2,'+str(i)+','+str(pair[2][1]))
            lines.append(voro.fname+'-1.'+'I3,'+str(i)+','+str(pair[2][2]))
            lines.append('**')

    wrt_to_file(file_name+"_pbcs.inp",lines)
    
def wrt_materials(voro,file_name,no_state,mat):
    
    lines=[]
    dummy_mat=True if mat==[] else False

    for i in range(len(voro.gids)):
        lines.append('*Material, name=grain-'+str(voro.gids[i]+1))
        
        if dummy_mat:
            lines.append('*Elastic')
            lines.append('210000'+', 0.3')
            lines.append('*Plastic, Hardening=JOHNSON COOK')
            lines.append('250, 5000., 0.1, 1., 1000., 999.')
        else:
            lines.append('*Depvar')
            lines.append(str(no_state)+',')
            lines.append('*User Material, constants='+str(len(mat)+3))

            mat_tot=list(voro.euler[i])+mat[:]

            mat_sliced = [mat_tot[j:j+8] for j in range(0, len(mat_tot), 8)]
            for mat_line in mat_sliced:    
                lines.append(str(mat_line)[1:-1])

        lines.append('**')
    
    wrt_to_file(file_name+"_materials.inp",lines)

def wrt_steps(voro,file_name,L,D,inc_size,non_linear):
    
    lines=[]

    nlgeom='YES' if non_linear else 'NO'

    lines.append('*Step, name=load_1, nlgeom='+nlgeom+', inc=10000000')
    lines.append('*Static')
    lines.append(str(inc_size)+', 1., '+str(inc_size/1000)+', '+str(inc_size))
    lines.append('**')
    
    wrt_fixed(lines,voro.fname)
    wrt_loads(lines,voro.fname,L,D)
    wrt_controls(lines)
    wrt_output(lines,voro.fname)

    lines.append('*End Step')
    lines.append('**')
    
    wrt_to_file(file_name+"_steps.inp",lines)

def wrt_fixed(lines,vname):

    ind_node=[1,2,3]
    ind_dof= [3,1,2]

    lines.append('*Boundary, type=VELOCITY')
    lines.append(vname+'-1.'+'fixedpoint,1,3,0.0')

    for i in range(len(ind_node)):
        lines.append(vname+'-1.'+'I'+str(ind_node[i])+','+str(ind_dof[i])+','+str(ind_dof[i])+',0.0')

    lines.append('**')

def wrt_loads(lines,vname,L,D):

    if any(D):
        lines.append('*Boundary, type=VELOCITY')
        get_load_lines(vname,D,'D',lines)
        lines.append('**')
    
    if any(L):
        get_load_lines(vname,L,'L',lines)
        lines.append('**')

def get_load_lines(vname,M,typ,lines):

    ind_node=[1,2,3,1,3,2]
    ind_dof= [1,2,3,2,1,3]
    
    dum=[str(i)+',' if typ=='D' else '' for i in ind_dof]

    for i in range(len(ind_dof)):
        if M[i]:
            if typ=='L':
                lines.append('*Cload')
            lines.append(vname+'-1.'+'I'+str(ind_node[i])+','+str(ind_dof[i])+','+dum[i]+str(M[i])[1:-1])

def wrt_controls(lines):

    lines.append('*Controls, reset')
    lines.append('*Controls, parameters=time incrementation')
    lines.append('10,20,,,,,,,,,')
    lines.append('0.5,,,,,,,')
    lines.append('*Controls, parameters=line search')
    lines.append('4,,,,')
    lines.append('**')

def wrt_output(lines,vname):
    
    lines.append('*Output, field')
    lines.append('*Node Output')
    lines.append('U, CF')
    
    lines.append('*Element Output, directions=yes')
    lines.append('S, SDV, LE, MISES')
    lines.append('**')
    
    lines.append('*Output, history')
    for i in range(3):
        lines.append('*Node Output, nset='+vname+'-1.'+'I'+str(i+1))
        lines.append('RF1, RF2, RF3, U1, U2, U3')

    lines.append('**')

def wrt_to_file(fname,lines):
    
    with open(fname,"w") as f:
        f.write('\n'.join(lines))
        f.write('\n')

def create_folder(voro):

    os.makedirs(voro.fname+"_inp", exist_ok=True)

    return voro.fname+"_inp"+'/'+voro.fname

def abaqus_export(voro,abaqus_input):

    no_state=abaqus_input.get('no_state_vars',0)
    mat=abaqus_input.get('mat',[])
    D=abaqus_input.get('D',[])
    L=abaqus_input.get('L',[])
    inc_size=abaqus_input.get('inc_size',0.01)
    non_linear=abaqus_input.get('non_linear',True)
    
    dof=range(1,4)
    
    if len(voro.mesh)==0:
        return

    t=Timer()
    t.start()
    
    [hull,nodes,elems,grains,fixed_node,settings]=voro.mesh
    
    file_name=create_folder(voro)

    wrt_main(voro,file_name)
    wrt_nodes(voro,file_name,nodes,fixed_node)
    wrt_elements(voro,file_name,elems,grains,settings)
    wrt_pbcs(voro,file_name,hull,dof=dof)
    wrt_materials(voro,file_name,no_state,mat)
    wrt_steps(voro,file_name,L=L,D=D,inc_size=inc_size,non_linear=non_linear)
    
    t.stop('Elapsed time in Abaqus export')